image: registry.gitlab.com/nso-developer/ci-runner-image:latest

# Stages for our CI jobs
# Gitlab only allows the specification of one progression of stages. We use two
# different "modes" for running our jobs, which are essentially mutually
# exclusive. In the special CI_MODE=mirror, there is only a single mirror job
# that runs in the mirror stage. For a normal CI run, the other stages are used.
stages:
  - mirror
  - build
  - build-yangmodels

# The helper functions mark_section_start/end that help us mark out the start
# and end of a "section" in a CI job. Each section can be folded and gets a
# duration timestamp in the CI job view making it easy to see how long it took
# to run. The functions are defined in a YAML anchor. This allows us to add the
# functions to 'before_script' (and 'script') and also 'after_script'.
.helper_mark_section: &helper_mark_section
  - |
    function mark_section_start() {
      echo -e "section_start:0:$1\r\e[0K$2"
      SECONDS=0
    }
    function mark_section_end() {
      echo -e "section_end:${SECONDS}:$1\r\e[0K"
    }

# The before script makes sure that docker is installed, since that is a
# prerequisite for most jobs. If the jobs are run with a standard debian or
# Ubuntu image, docker isn't installed. To speed up the build, this install step
# can be skipped by running an image that already has docker installed, for
# example registry.gitlab.com/nso-developer/ci-runner-image:latest
#
# We also include the mark_section helpers.
before_script:
  - *helper_mark_section
  - mark_section_start initialize Initializing
  - which docker xmlstarlet >/dev/null || (echo "Installing prerequisites..." && apt-get -y update && DEBIAN_FRONTEND=noninteractive apt-get install -qy apt-transport-https ca-certificates software-properties-common xmlstarlet; which docker || (echo "Installing docker..." && curl -fsSL https://download.docker.com/linux/debian/gpg | apt-key add - && apt-key fingerprint 0EBFCD88 && add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/debian $(lsb_release -cs) stable" && apt-get -y update && apt-get -qy install -qy docker-ce docker-ce-cli containerd.io))
  - which pyang >/dev/null || (echo "Installing pyang..." && apt-get -y update && DEBIAN_FRONTEND=noninteractive apt-get install -qy python3-pip --no-install-recommends && pip3 install pyang)
  - mark_section_end initialize


# Template for the standard build job
.build:
  stage: build
  except:
    variables:
      - $CI_MODE == "mirror"
  cache:
    - key:
        files:
          - Makefile
      paths:
        - src
  script:
    - if [ -n "${CI_DOCKER_USER}" ]; then echo "Using provided credentials for authentication with docker registry"; docker login -u ${CI_DOCKER_USER} -p ${CI_DOCKER_PASSWORD} ${CI_REGISTRY}; else docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}; fi
    - mark_section_start clone-deps "Cloning dependencies"
    - make clone-deps
    - mark_section_end clone-deps
    - mark_section_start build Building
    - make build
    - mark_section_end build
    - mark_section_start test-run "Running tests"
    - make test
    - mark_section_end test-run
    - mark_section_start image-push "Pushing images"
    - echo "Using Gitlab CI token to authenticate with Docker registry for pushing image"
    - docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}
    - if [ "${DOCKER_PUSH}" != "false" ]; then make push; fi
    - if [ "${CI_COMMIT_REF_NAME}" = "${CI_DEFAULT_BRANCH}" ]; then make tag-release; fi
    - if [ "${CI_COMMIT_REF_NAME}" = "${CI_DEFAULT_BRANCH}" ] && [ "${DOCKER_PUSH}" != "false" ]; then make push-release; fi
    - mark_section_end image-push
  after_script:
    - *helper_mark_section
    - mark_section_start test-stop "Stopping residual test containers"
    - make save-logs
    - make test-stop
    - mark_section_end test-stop
  artifacts:
    when: always
    paths:
      - "**/container-logs/"

build:
  extends: .build

build-yangmodels:
  stage: build-yangmodels
  parallel:
    matrix:
      - YANG_PATH: ["yang/vendor/nokia/7x50_YangModels/latest_sros_21.10",
                    "yang/vendor/nokia/7x50_YangModels/latest_sros_22.2",
                    "yang/vendor/juniper/21.1/21.1R1/junos",
                    "yang/vendor/cisco/xr/762",
                    "yang/vendor/cisco/xr/771"]
  except:
    variables:
      - $CI_MODE == "mirror"
  cache:
    - key:
        files:
          - Makefile
      paths:
        - yang
  script:
    - if [ -n "${CI_DOCKER_USER}" ]; then echo "Using provided credentials for authentication with docker registry"; docker login -u ${CI_DOCKER_USER} -p ${CI_DOCKER_PASSWORD} ${CI_REGISTRY}; else docker login -u gitlab-ci-token -p ${CI_JOB_TOKEN} ${CI_REGISTRY}; fi
    - mark_section_start clone-yangmodels "Cloning yangmodels repository"
    - make clone-yangmodels
    - mark_section_end clone-yangmodels
    - mark_section_start test-run "Running tests"
    - make test-compose-yang
    - mark_section_end test-run
    - mark_section_start image-push "Pushing images"
    - echo "Using Gitlab CI token to authenticate with Docker registry for pushing image"
    - if [ "${CI_COMMIT_REF_NAME}" = "${CI_DEFAULT_BRANCH}" ]; then make tag-release-composed-notconf; fi
    - if [ "${CI_COMMIT_REF_NAME}" = "${CI_DEFAULT_BRANCH}" ] && [ "${DOCKER_PUSH}" != "false" ]; then make push-release-composed-notconf; fi
    - mark_section_end image-push
  after_script:
    - *helper_mark_section
    - mark_section_start test-stop "Stopping residual test containers"
    - make save-logs
    - make test-stop
    - mark_section_end test-stop
  artifacts:
    when: always
    paths:
      - "**/container-logs/"

# Special CI job for running a mirroring job that pulls in the latest changes
# from upstream. Unlike normal GitLab mirroring, which fails whenever the local
# repository has diverged (has changes), this job uses a normal 'git pull' which
# means merge commits are used when necessary. It essentially allows local
# modifications.
mirror:
  stage: mirror
  only:
    variables:
      - $CI_MODE == "mirror"
  before_script:
    - 'which ssh-agent || ( apt-get update -y && apt-get install -y openssh-client )'
    - 'which git || ( apt-get update -y && apt-get install -y git )'
    - eval $(ssh-agent -s)
    - ssh-add <(echo "${GIT_SSH_PRIV_KEY}")
    - mkdir -p ~/.ssh
    - echo "${GITLAB_HOSTKEY}" >> ~/.ssh/known_hosts
    - git config --global user.email "${GITLAB_USER_EMAIL}"
    - git config --global user.name "${GITLAB_USER_NAME}"
  script:
    - "git clone git@${CI_SERVER_HOST}:${CI_PROJECT_PATH}.git"
    - cd "${CI_PROJECT_NAME}"
    - git remote add upstream "${MIRROR_REMOTE}"
    - if [ "${MIRROR_PULL_MODE}" = "rebase" ]; then git pull --rebase upstream ${CI_DEFAULT_BRANCH}; else git pull upstream ${CI_DEFAULT_BRANCH}; fi
    - if [ "${MIRROR_PULL_MODE}" = "rebase" ]; then git push --force origin ${CI_DEFAULT_BRANCH}; else git push origin ${CI_DEFAULT_BRANCH}; fi
